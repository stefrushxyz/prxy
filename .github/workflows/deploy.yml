name: Deploy to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_NAME: ${{ vars.PROJECT_NAME || 'prxy' }}
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  EC2_INSTANCE_TYPE: ${{ vars.EC2_INSTANCE_TYPE || 't3.micro' }}
  UPDATE_INTERVAL: ${{ vars.UPDATE_INTERVAL || '*/1 * * * *' }}
  PORT: ${{ vars.PORT || '3000' }}
  S3_BUCKET: ${{ vars.PROJECT_NAME || 'prxy' }}-s3-env

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      repo-url: ${{ steps.build-image.outputs.repo-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.PROJECT_NAME }} || \
          aws ecr create-repository --repository-name ${{ env.PROJECT_NAME }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$PROJECT_NAME:$IMAGE_TAG -t $ECR_REGISTRY/$PROJECT_NAME:latest --build-arg PORT=${{ env.PORT }} .
          docker push $ECR_REGISTRY/$PROJECT_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$PROJECT_NAME:latest
          echo "image=$ECR_REGISTRY/$PROJECT_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "repo-url=$ECR_REGISTRY/$PROJECT_NAME" >> $GITHUB_OUTPUT

  deploy-infra:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required secrets
        id: check_secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.PULUMI_ACCESS_TOKEN }}" ] || [ -z "${{ secrets.ALLOWED_API_KEYS }}" ]; then
            echo "Required secrets are missing. Please set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, PULUMI_ACCESS_TOKEN, and ALLOWED_API_KEYS secrets."
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install Pulumi
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 bucket if it doesn't exist
        run: |
          aws s3api head-bucket --bucket ${{ env.S3_BUCKET }} 2>/dev/null || \
          aws s3 mb s3://${{ env.S3_BUCKET }}

      - name: Install dependencies
        working-directory: ./infra
        run: npm install

      - name: Setup Pulumi configuration
        working-directory: ./infra
        run: |
          # Setup Pulumi stack
          pulumi stack select dev --create

          # Set configs
          pulumi config set PROJECT_NAME ${{ env.PROJECT_NAME }}
          pulumi config set aws:region ${{ env.AWS_REGION }}
          pulumi config set EC2_INSTANCE_TYPE ${{ env.EC2_INSTANCE_TYPE }}
          pulumi config set UPDATE_INTERVAL "${{ env.UPDATE_INTERVAL }}"
          pulumi config set PORT ${{ env.PORT }}
          pulumi config set IMAGE_TAG ${{ github.sha }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Create EC2 environment file
        run: |
          cat > prxy.env << EOL
          PORT=$PORT
          CLAUDE_API_URL=https://api.anthropic.com
          ALLOWED_API_KEYS=${{ secrets.ALLOWED_API_KEYS }}
          EOL
          aws s3 cp prxy.env s3://${{ env.S3_BUCKET }}/prxy.env

      - name: Deploy with Pulumi
        id: pulumi-deploy
        working-directory: ./infra
        run: |
          set +e
          pulumi up --yes
          PULUMI_EXIT_CODE=$?
          set -e

          if [ $PULUMI_EXIT_CODE -ne 0 ]; then
            echo "Pulumi deployment failed with exit code $PULUMI_EXIT_CODE"
            pulumi stack export > pulumi-failed-state.json
            aws s3 cp pulumi-failed-state.json s3://${{ env.S3_BUCKET }}/pulumi-failed-state-$(date +%Y%m%d%H%M%S).json
            exit $PULUMI_EXIT_CODE
          fi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Trigger container update on EC2
        if: success()
        run: |
          # Get instance ID from Pulumi output
          cd ./infra
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.PROJECT_NAME }}" --query "Reservations[*].Instances[*].InstanceId" --output text)

          if [ -n "$INSTANCE_ID" ]; then
            echo "Found EC2 instance: $INSTANCE_ID, triggering update..."
            
            # Create a trigger file in S3 that the EC2 instance will poll for
            echo "${{ needs.build-and-push.outputs.repo-url }}:${{ github.sha }}" > update-trigger.txt
            aws s3 cp update-trigger.txt s3://${{ env.S3_BUCKET }}/update-trigger.txt
            
            echo "Created update trigger in S3 bucket. Instance will pull updates on next cron cycle."
          else
            echo "EC2 instance not found. It may be creating for the first time."
          fi

      - name: Output deployment information
        if: success()
        working-directory: ./infra
        run: |
          echo "Deployment successful!"
          echo "--------------------------------"
          echo "Environment variables used:"
          echo "--------------------------------"
          echo "PROJECT_NAME: ${{ env.PROJECT_NAME }}"
          echo "AWS_REGION: ${{ env.AWS_REGION }}"
          echo "EC2_INSTANCE_TYPE: ${{ env.EC2_INSTANCE_TYPE }}"
          echo "UPDATE_INTERVAL: ${{ env.UPDATE_INTERVAL }}"
          echo "PORT: ${{ env.PORT }}"
          echo "S3_BUCKET: ${{ env.S3_BUCKET }}"
          echo "--------------------------------"
          echo "Pulumi stack output:"
          echo "--------------------------------"
          echo "publicIp: $(pulumi stack output publicIp)"
          echo "endpoint: $(pulumi stack output endpoint)"
          echo "deployedImageTag: $(pulumi stack output deployedImageTag)"
          echo "deployedAt: $(pulumi stack output deployedAt)"
          echo "--------------------------------"
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
